// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transfer.proto

/*
Package transfer is a generated protocol buffer package.

It is generated from these files:
	transfer.proto

It has these top-level messages:
	UploadRequest
	UploadReply
	DownloadRequest
	DownloadReply
*/
package transfer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadRequest struct {
	FileContents string `protobuf:"bytes,1,opt,name=fileContents" json:"fileContents,omitempty"`
	FileName     string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadRequest) GetFileContents() string {
	if m != nil {
		return m.FileContents
	}
	return ""
}

func (m *UploadRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type UploadReply struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *UploadReply) Reset()                    { *m = UploadReply{} }
func (m *UploadReply) String() string            { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()               {}
func (*UploadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DownloadRequest struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DownloadRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// The response message containing the greetings
type DownloadReply struct {
	FileExistence bool   `protobuf:"varint,1,opt,name=fileExistence" json:"fileExistence,omitempty"`
	FileContents  string `protobuf:"bytes,2,opt,name=fileContents" json:"fileContents,omitempty"`
}

func (m *DownloadReply) Reset()                    { *m = DownloadReply{} }
func (m *DownloadReply) String() string            { return proto.CompactTextString(m) }
func (*DownloadReply) ProtoMessage()               {}
func (*DownloadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DownloadReply) GetFileExistence() bool {
	if m != nil {
		return m.FileExistence
	}
	return false
}

func (m *DownloadReply) GetFileContents() string {
	if m != nil {
		return m.FileContents
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "transfer.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "transfer.UploadReply")
	proto.RegisterType((*DownloadRequest)(nil), "transfer.DownloadRequest")
	proto.RegisterType((*DownloadReply)(nil), "transfer.DownloadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileTransfer service

type FileTransferClient interface {
	// upload a file
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error)
	// download a file
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadReply, error)
}

type fileTransferClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferClient(cc *grpc.ClientConn) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadReply, error) {
	out := new(UploadReply)
	err := grpc.Invoke(ctx, "/transfer.FileTransfer/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadReply, error) {
	out := new(DownloadReply)
	err := grpc.Invoke(ctx, "/transfer.FileTransfer/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileTransfer service

type FileTransferServer interface {
	// upload a file
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
	// download a file
	Download(context.Context, *DownloadRequest) (*DownloadReply, error)
}

func RegisterFileTransferServer(s *grpc.Server, srv FileTransferServer) {
	s.RegisterService(&_FileTransfer_serviceDesc, srv)
}

func _FileTransfer_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.FileTransfer/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transfer.FileTransfer/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _FileTransfer_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileTransfer_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xfc,
	0xb9, 0x78, 0x43, 0x0b, 0x72, 0xf2, 0x13, 0x53, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x94, 0xb8, 0x78, 0xd2, 0x32, 0x73, 0x52, 0x9d, 0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a, 0x8a, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x50, 0xc4, 0x84, 0xa4, 0xb8, 0x38, 0x40, 0x7c, 0xbf, 0xc4,
	0xdc, 0x54, 0x09, 0x26, 0xb0, 0x3c, 0x9c, 0xaf, 0xa4, 0xca, 0xc5, 0x0d, 0x33, 0xb0, 0x20, 0xa7,
	0x52, 0x48, 0x8c, 0x8b, 0xad, 0xb8, 0x24, 0xb1, 0xa4, 0x14, 0x62, 0x10, 0x47, 0x10, 0x94, 0xa7,
	0xa4, 0xcb, 0xc5, 0xef, 0x92, 0x5f, 0x9e, 0x87, 0x6c, 0x33, 0xb2, 0xa9, 0x8c, 0x68, 0xa6, 0x46,
	0x72, 0xf1, 0x22, 0x94, 0x83, 0xcc, 0x55, 0xe1, 0xe2, 0x05, 0x49, 0xba, 0x56, 0x64, 0x16, 0x97,
	0xa4, 0xe6, 0x25, 0xa7, 0x42, 0x8d, 0x47, 0x15, 0xc4, 0xf0, 0x0c, 0x13, 0xa6, 0x67, 0x8c, 0x7a,
	0x18, 0xb9, 0x78, 0xdc, 0x32, 0x73, 0x52, 0x43, 0xa0, 0x41, 0x22, 0x64, 0xc5, 0xc5, 0x06, 0xf1,
	0x81, 0x90, 0xb8, 0x1e, 0x3c, 0xdc, 0x50, 0x02, 0x49, 0x4a, 0x14, 0x53, 0xa2, 0x20, 0xa7, 0x52,
	0x89, 0x41, 0xc8, 0x81, 0x8b, 0x03, 0xe6, 0x4e, 0x21, 0x49, 0x84, 0x22, 0x34, 0xaf, 0x4a, 0x89,
	0x63, 0x93, 0x02, 0x9b, 0x90, 0xc4, 0x06, 0x8e, 0x21, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xaa, 0x26, 0x4d, 0x60, 0xb3, 0x01, 0x00, 0x00,
}
